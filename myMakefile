CC_PATH = /usr/bin/
MK_PATH = /usr/bin/
MK_PATH_BIN = /opt/fsl-qoriq/2.6/sysroots/x86_64-fslsdk-linux/usr/bin/
#KERNEL_PATH=/mnt/vda3/software/storage/jailhouse/openil/openil/output/build/linux-LSDK-19.09-V4.19/
KERNEL_PATH=/mnt/vda3/software/lsdk_flexbuilder/flexbuild_lsdk1909/flexbuild_lsdk1909_update_221019/build/linux/linux/arm64/LS/output/LSDK-19.09-V4.19/

MYINSTALL_MOD_PATH = ./install/mod
MYINSTALL_HDR_PATH = ./install/hdr
MYINSTALL_PATH = ./install/
TFTP_DIR = /mnt/vda3/tftpboot/

dpdk:
	make config T=arm64-dpaa2-linuxapp-gcc
	make T=arm64-dpaa2-linuxapp-gcc CONFIG_RTE_KNI_KMOD=n CONFIG_RTE_LIBRTE_PMD_OPENSSL=n install

myapp:
	make -C examples/l3fwd
	cp examples/l3fwd/build/l3fwd ./bin/

cpb:
	cp ./inmates/demos/arm64/gic-demo.bin ./whb/
	cp ./inmates/demos/arm64/uart-demo.bin ./whb/
	cp ./tools/jailhouse ./whb/
	cp ./driver/jailhouse.ko ./whb/
	cp ./configs/arm64/nxp-ls1043a.cell ./whb/
	cp ./configs/arm64/nxp-ls1043a-gic-demo.cell ./whb/
	cp ./configs/arm64/nxp-ls1043a-uart-demo.cell ./whb/
	tar -cvzf whb.tgz ./whb/
	sudo cp whb.tgz /var/www/html/image/

jail:
	make ARCH=arm64 CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- DESTDIR=whb KDIR=${KERNEL_PATH}
	make ARCH=arm64 CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- DESTDIR=whb KDIR=${KERNEL_PATH} install
	@echo "make jailhouse is OK"

lx2:
	#bash -c "source env.sh"
	#make distclean
	#./scripts/kconfig/merge_config.sh arch/arm64/configs/defconfig arch/arm64/configs/lsdk.config
	make -j8 ARCH=arm64 CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- all
	@echo "make kernel is OK"

lx2img:
	mkimage -f kernel2160ardb.its kernel-lx2160ardb-1214.itb
	mkimage -f kernel2160aqds.its kernel-lx2160aqds-1214.itb
	${MK_PATH_BIN}mkimage -A arm64 -O linux -T kernel -C gzip -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image.gz uImage-ls2160
	cp kernel-lx2160ardb-1214.itb kernel-lx2160aqds-1214.itb uImage-ls2160 ${TFTP_DIR}
	@echo "make uImage is OK"

cfg:
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- defconfig
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- lsdk.config

cpbin:
	#sudo cp ./uImage-ls2088aissd-1116-ep /media/nxf24402/boot/
	#sudo cp ./uImage-ls2088aissd-1116-rc /media/nxf24402/boot/
	sudo cp ./uImage-ls2088aissd-0710-rc /media/nxf24402/boot/
	sudo cp ./uImage-ls2088aissd-0710-ep /media/nxf24402/boot/
	sudo cp ./uImage-ls2160 /media/nxf24402/boot/

mkdir:
	mkdir ./install
	mkdir ./install/mod  ./install/hdr

all:
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- defconfig
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- freescale.config
	make -j 30 ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu-
	@echo "make all is OK"

distclean:
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- distclean
	@echo "clean is OK"

clean:
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- clean
	@echo "clean is OK"

zImage:
	make zImage -j 4 ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu-
	@echo "make apd is OK"

apd:
	make -j 4 ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu-
	@echo "make apd is OK"

menuconfig:
	make ARCH=arm64  CROSS_COMPILE=${LX2_PATH}aarch64-fsl-linux- menuconfig
	@echo "menuconfig is OK"

issdimage:
	${MK_PATH}mkimage -f kernel2088a-issd.its ls2088_issd_0929.itb
	cp ls2088_issd_0929.itb ${TFTP_DIR}
	cp arch/arm64/boot/Image ${TFTP_DIR}
	cp arch/arm64/boot/Image.gz ${TFTP_DIR}

rdbimage2:
	${MK_PATH}mkimage -f my_kernel2088a-rdb2.its ls2088_tst_rdb3.itb
	cp ls2088_tst_rdb3.itb ${TFTP_DIR}

qdsimage:
	${MK_PATH}mkimage -f kernel2088a-qds.its ls2088_inic_qds_0811.itb
	cp ls2088_inic_qds_0811.itb ${TFTP_DIR}

uImage:
	${MK_PATH}mkimage -A arm64 -O linux -T kernel -C gzip -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image.gz uImage-lsdk1706-1017
	cp uImage-lsdk1706-1017 ${TFTP_DIR}uImage-lsdk1706-1017
	@echo "make uImage is OK"

issdcfg:
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- defconfig
	make ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- ls2088aissd.config

uImageissd2:
	${MK_PATH}mkimage -A arm64 -O linux -T kernel -C none -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image uImage-ls2088aissd-0907
	cp uImage-ls2088aissd-0907 ${TFTP_DIR}
	@echo "make uImage is OK"

uImageissd:
	${MK_PATH}mkimage -A arm64 -O linux -T kernel -C gzip -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image.gz uImage-ls2088aissd-1107
	cp uImage-ls2088aissd-1107 ${TFTP_DIR}
	@echo "make uImage is OK"

issdrc:
	${MK_PATH}mkimage -A arm64 -O linux -T kernel -C gzip -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image.gz uImage-ls2088aissd-0710-rc
	cp uImage-ls2088aissd-0710-rc ${TFTP_DIR}
	@echo "make uImage is OK"

issdep:
	${MK_PATH}mkimage -A arm64 -O linux -T kernel -C gzip -a 0x80080000 -e 0x80080000 -n Linux -d arch/arm64/boot/Image.gz uImage-ls2088aissd-0710-ep
	cp uImage-ls2088aissd-0710-ep ${TFTP_DIR}
	@echo "make uImage is OK"

ls1043rdb:
	${MK_PATH}mkimage -f kernel-ls1043a-rdb.its ls1043ardb.itb
	cp ls1043ardb.itb ${TFTP_DIR}

scp:
	git diff > a.patch
	scp a.patch wanghb@10.192.208.233:~/gitMirror/dash-lts-newinic

cp:
	scp uImage-ls2088aissd-1116-ep uImage-ls2088aissd-1116-rc nxf24402@10.193.20.33:/media/nxf24402/Primary/linux/issd_dir/dnstorage/dash-lts-newinic

ls1046rdb:
	${MK_PATH}mkimage -f kernel-ls1046a-rdb.its ls1046ardb.itb
	cp ls1046ardb.itb ${TFTP_DIR}

rdbimage46:
	${MK_PATH}mkimage -f kernel-ls1046a-rdb.its ls1046rdb_v4p10_0118.itb
	cp ls1046rdb_v4p10_0118.itb ${TFTP_DIR}
rdbimagerxe:
	${MK_PATH}mkimage -f kernel-ls1046a-rdb2.its ls1046rdb_roce.itb
	cp ls1046rdb_roce.itb ${TFTP_DIR}
	cp ./arch/arm64/boot/Image.gz ${MYINSTALL_PATH}
	cp ./ls1046rdb_roce.itb ${MYINSTALL_PATH}

modules:
	make modules -j 30 ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu-

modules_install:
	make modules_install ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- INSTALL_MOD_PATH=${MYINSTALL_MOD_PATH}

headers_install:
	make headers_install ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- INSTALL_HDR_PATH=${MYINSTALL_HDR_PATH}

installs:
	cp ./arch/arm64/boot/Image.gz ${MYINSTALL_PATH}
	cp ./ls2088_v4p10_rdb.itb ${MYINSTALL_PATH}
	make install ARCH=arm64  CROSS_COMPILE=${CC_PATH}aarch64-linux-gnu- INSTALL_PATH=${MYINSTALL_PATH}


